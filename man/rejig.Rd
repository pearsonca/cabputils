% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rejig.R
\name{rejig}
\alias{rejig}
\title{Generic Function Wrapper}
\usage{
rejig(FUN, ..., .ENV = environment(FUN))
}
\arguments{
\item{FUN}{the function to wrap}

\item{...}{the new defaults}

\item{.ENV}{the environment for the resulting
copy-function (i.e. where any variables will be
evaluated). NB, the default (\code{environment(FUN)}) is
mostly convenient, but can be dangerous e.g. by
replacing an important function}
}
\value{
the new function
}
\description{
provides a convenience function for
producing duplicate functions with different
defaults
}
\examples{
require(ggplot2); require(cabputils)
require(data.table); require(deSolve)

# make some reference plotting data
dSIR <- function(t, SIR, params) with(params,{
  infections <- beta*SIR[1]*SIR[2]
  recoveries <- gamma*SIR[2]
  list(c(-infections, infections-recoveries, recoveries))
})

dSEIR <- function(t, SEIR, params) with(params,{
  infections <- beta*SEIR[1]*SEIR[3]
  incubation <- lambda*SEIR[2]
  recoveries <- gamma*SEIR[3]
  list(c(-infections, infections-incubation, incubation-recoveries, recoveries))
})

SIR.dt <- ode(
  c(S=100, I=1, R=0),
  seq(0,50,by=0.1),
  dSIR, parms = list(beta = 0.01, gamma = .2)
) |> as.data.table() |> melt(id.vars = "time")

SEIR.dt <- ode(
  c(S=100, E=0, I=1, R=0),
  seq(0,50,by=0.1),
  dSEIR, parms = list(beta = 0.01, lambda = .1, gamma = .2)
) |> as.data.table() |> melt(id.vars = "time")

# USE rejig: define some scales to share
scale_color_state <- rejig(
  scale_color_manual,
  name = paste0(breaks, collapse = ""),
  values = c(S="dodgerblue", E="yellow", I="firebrick", R="limegreen")
)
scale_y_count <- rejig(scale_y_continuous, name = "Count")

# note difference between these:
scale_color_state
scale_y_count

scale_x_simtime <- rejig(scale_x_continuous, name = NULL)

ggplot(SIR.dt) + aes(time, value, color = variable) +
  geom_line() +
  scale_color_state(breaks = levels(SIR.dt$variable)) +
  scale_y_count() +
  scale_x_simtime() +
  theme_minimal()

ggplot(SEIR.dt) + aes(time, value, color = variable) +
  geom_line() +
  scale_color_state(breaks = levels(SEIR.dt$variable)) +
  scale_y_count() +
  scale_x_simtime() +
  theme_minimal()

}
