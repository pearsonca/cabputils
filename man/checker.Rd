% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/checker.R
\name{checker}
\alias{checker}
\title{Generator for \code{check_...}}
\usage{
checker(reqexpr, msg)
}
\arguments{
\item{reqexpr}{a logical expression to check e.g. \code{is.integer(x)}; must
\emph{only} be written in terms of a single variable \code{x}, though if that variable
should be e.g. a list, then \code{x$something} will work.}

\item{msg}{a \code{\link[=sprintf]{sprintf()}} \code{fmt} argument, with a single \verb{\%s}, which will be
filled by the variable name piped into the resulting check function}
}
\description{
Generator for \code{check_...}
}
\details{
This function is a lightweight Factory for making argument checking
functions (see example for applications of those checking functions).

This somewhat gnarly bit of NSE satisfies several demands:
\itemize{
\item it consumes the minimal input from developer to specify a check:
the test & the error message
\item it creates a function that works
\item that function is human-readable when inspected
}

\code{\link[=alist]{alist()}} creates the (single) argument list, \code{\link[=substitute]{substitute()}} incorporates
the materialized values of the variable test (\code{reqexpr}) and error message
(\code{msg}) into the function body. \code{\link[=as.function]{as.function()}} turns it all into a real
function.
}
\examples{
# define some check functions:
check_character <- checker(is.character(x), "`\%s` is not class 'character'.")
check_scalar <- checker(length(x) == 1, "`\%s` must be length == 1.")
check_nonemptychar <- checker(all(nchar(x) > 0), "`\%s` must be non-empty.")
# note the human-readable internals:
check_character
check_scalar
check_nonemptychar

# define a function that wants argument checking, and use check functions:
helloworld <- function(name) {
  name |> check_character() |> check_scalar() |> check_nonemptychar()
  sprintf("Hello, \%s!", name)
}

# note the self-documenting argument validation
helloworld

# works:
helloworld("Carl")

# doesn't:
try(helloworld(1)) # error from check_character
try(helloworld(c("Alice", "Bob"))) # error from check_scalar
try(helloworld("")) # error from check_nonemptychar
}
