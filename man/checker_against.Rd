% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/checker.R
\name{checker_against}
\alias{checker_against}
\title{Expanded Generator for \code{check_...}}
\usage{
checker_against(reqexpr, msg)
}
\arguments{
\item{reqexpr}{a logical expression to check e.g. \code{x \%in\% ref}; must
\emph{only} be written in terms of variables \code{x} (the target) and \code{ref} (the
reference), though if those variables have internal structure (e.g. are
\code{list}s), then e.g. \code{x$something} will work.}

\item{msg}{a \code{\link[=sprintf]{sprintf()}} \code{fmt} argument, with two \verb{\%s}, which will be
filled by the variable name piped into the resulting check function (first)
and then the reference argument (second)}
}
\description{
Creates \code{check_...} functions with a \code{ref}erence argument.
}
\details{
This function is a lightweight Factory for making argument checking
functions (see example for applications of those checking functions).

This somewhat gnarly bit of NSE satisfies several demands:
\itemize{
\item it consumes the minimal input from developer to specify a check:
the test & the error message
\item it creates a function that works
\item that function is human-readable when inspected
}

\code{\link[=alist]{alist()}} creates the argument list, \code{\link[=substitute]{substitute()}} incorporates
the materialized values of the variable test (\code{reqexpr}) and error message
(\code{msg}) into the function body. \code{\link[=as.function]{as.function()}} turns it all into a real
function.
}
\examples{
# define some single check functions:
check_character <- checker(is.character(x), "`\%s` is not class 'character'.")
check_scalar <- checker(length(x) == 1, "`\%s` must be length == 1.")
check_nonemptychar <- checker(all(nchar(x) > 0), "`\%s` must be non-empty.")
# and now one using an additional argument
check_among <- checker_against(x \%in\% ref, "`\%s` is not among \%s")
# note the human-readable internals:
check_among

# define a function that wants argument checking, and use check functions:
helloworld <- function(name) {
  name |> check_character() |> check_scalar() |> check_nonemptychar() |>
  check_among(c("Alice", "Bob", "Carl"))
  sprintf("Hello, \%s!", name)
}

# note the self-documenting argument validation
helloworld

# works:
helloworld("Carl")
# doesn't:
try(helloworld("Robert"))

}
